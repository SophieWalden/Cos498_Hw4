
A mega-todo list of all of the upgrades that might be made for this engine

Engine:
 - Easily create new factions mid-game
 - Ability to build unit-made structures
  - Research structures which unlock building of advanced units
 - Create topright display of:
  - Factions list
   - units controlled
   - Cities controlled
   - Resources per factions
  - Speed selection
  - Turn count

Terrain:
 - Create wood, stone, and metal tiles which units can build machines on to harvest
  - Enemies can capture these machines? Or destroy them?
  - Wood for basic units, stone for structures, and metal for advanced units

AI:
 - GANN evolutionary AI
 - Basic City Conquering AI
 - Ability to defect after condition
 - Basic army commanding structure for all AI
  - Break down units into three categories: commander, generals, and soldiers
  - Commander establishes missions like "conquer cities" or "defend cities"
  - Generals decide which cities to take their troop 
  - Soldiers follow generals commands and do the individual pathfinding towards towns / cities
  - When a General dies the next eldest soldier is promoted (Maybe a func that takes eldest + amount of kills?)
  - When a commander dies the next general also evaluated is promoted
  - Specifics of pathfinding / action decision making is what separates different AIs


Misc Notes:
 - Map wrapping needs to be accounted for in pathfinding
  - For example, maybe with a 10x10 map maybe routing to [3,8] could also check shortest path to [13, 8], [3, 18], [-7, 8], and [3, -2]?

TODO Order:
 - Make basic conditional decisions that can later be changed across different AI systems
 - Fix lag in planning stage (moving mass units)
 - Create a visual way to discern between ranks / choices (Icons for commander missions, arrows for generals goals?)

List of known bugs:
 - factions can create units in unowned cities
 - Since all factions starting assigning unit ids at 0 then multiple units with the same id cant move in the same turn across factions


Initially to solve the sorting problem I created a sort that randomized command order, but kept each factions relative command order the same
This solved the fairness problem between multiple faction planning
The problem is that while doing all the planning in one tick is fine for static fields it can make animations look choppy
To solve this I spread it out 


Createa a side tab that by default displays:
 - Every faction
   - Faction Resources
   - Faction Units
   - Faction Cities

Allow you to click on a unit to be able to view their stats
 - Outline of chartacter?

Add in two other resources, stone and metal
Add another tile (Walls? Water?) Impassable. Make sure every map has a way to get to every node, but water can make interesting bottlenecks
Upgrade pathfinding to pathfind (once?) or figuring out a way around lakes
make buildings cost resources
abstract away AI decision making into a separate AI class 
Let each unit have (randomized or not) sways towards actions, such as gather wood, or conquer city.

Make camera_pos and default scroll scale for window sizes so no matter the size the display looks good on reset
Create custom cursors for when dragging

# Inspector Panel
What does it need?
  - Each faction, unit, city, materials
  - Unit Selection Panel
   - All unit information.



Change out A* pathfinding for field flow pathfinding
 - Compute when general finds a spot
 - Units look to general for where they should move
 - When any unit gets to the end spot the general can re-plan
 - Removes A* pathfinding for EVERY unit (godbless)

Create a cache for flowfields?
At the start cache the flowfield for every city for REALLY quick lookup (We onto to good optimizations??)

Commanders are multidefecting by being assigned to general on faction creation

I spent a lot of time using CProfiler to go through the functions and eliminate massive timesinks, some examples include:
 - Recreating the render queue every time a build structures command was submitted, not just on successful builds (Was happening hundreds time a second -> a couple)
 - Checking if units overtook cities or structures every move instead of once after all moves have processed


GET THESE DOWN (List of how much % of a game it takes up in a 1 minute game):
 - 11.67 seconds: Pygame font rendering
 - 10.51 seconds: Pygame surface blitting
 - 6.8 seconds: draw_map
 - 5.6 seconds: Pygame transform.scale
 - 4.6 seconds: get_tile_image
 - 3.1 seconds: Display.blit (my version of blitting)
 - 3.1 seconds: Surface.fill
 - 1.7 seconds: pygame.display.flip
 - 1.4 seconds: enumerate in general
 - 1.08 seconds: world_to_cord
 
Total of all of the top 10: 49.56 seconds
So pretty much 80% of time is spent just rendering, lets try to get that down

Caching of text brought it from 20% of the time -> 0.025%

Ideas:
 - Caching common rects, especially for text 
 - Caching scaled images

Optimization Tracking:
 - Unoptimized: 20 rounds / second
 - Text caching: 25 rounds / second
 - Image Caching: 28 rounds / second
 - Simulating Logic every round, drawing every 512 ticks: 59 rounds / second

 New tech: Alternating rounds
 Since logic frames are so much quicker then drawing frames on high speeds we can simply simulate multiple logic frames between drawing frames
 This lets us hit a crazy score of 61 rounds / second in a full-scrollable and zoomable sitatuion (with less lag then original A*)
 Even further since the previous logic every round simulation was still bound by the clock, with just so many logic frames inbetween we hit upto 650 rounds / second

 Figure out why get_tile_image has such high profile time?